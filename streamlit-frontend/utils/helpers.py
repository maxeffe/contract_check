import streamlit as st
from datetime import datetime
from typing import Any, Dict, List

def format_datetime(date_string: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not date_string:
        return "N/A"
    
    try:
        # –ü–∞—Ä—Å–∏–º ISO —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        dt = datetime.fromisoformat(date_string.replace('Z', '+00:00'))
        return dt.strftime('%d.%m.%Y %H:%M')
    except:
        return date_string

def format_currency(amount: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö"""
    return f"{amount:.2f}‚ÇΩ"

def format_percentage(value: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    return f"{value * 100:.1f}%"

def get_status_color(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    colors = {
        'COMPLETED': 'green',
        'ERROR': 'red',
        'PROCESSING': 'orange',
        'QUEUED': 'blue'
    }
    return colors.get(status, 'gray')

def get_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    emojis = {
        'COMPLETED': '‚úÖ',
        'ERROR': '‚ùå',
        'PROCESSING': 'üîÑ',
        'QUEUED': '‚è≥'
    }
    return emojis.get(status, '‚ùì')

def calculate_pages_from_text(text: str) -> int:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    word_count = len(text.split())
    return max(1, word_count // 500)  # –ü—Ä–∏–º–µ—Ä–Ω–æ 500 —Å–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

def validate_file_size(file_content: bytes, max_size_mb: int = 10) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
    size_mb = len(file_content) / (1024 * 1024)
    return size_mb <= max_size_mb

def get_file_extension(filename: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    return filename.split('.')[-1].lower() if '.' in filename else ''

def is_supported_file(filename: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª"""
    supported_extensions = ['txt', 'pdf', 'doc', 'docx']
    extension = get_file_extension(filename)
    return extension in supported_extensions

def show_success_message(message: str, duration: int = 3):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
    placeholder = st.empty()
    placeholder.success(message)
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä

def show_error_message(message: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    st.error(f"‚ùå {message}")

def show_warning_message(message: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    st.warning(f"‚ö†Ô∏è {message}")

def show_info_message(message: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    st.info(f"‚ÑπÔ∏è {message}")

def create_download_button(data: str, filename: str, mime_type: str = "text/plain"):
    """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
    return st.download_button(
        label=f"üì• –°–∫–∞—á–∞—Ç—å {filename}",
        data=data,
        file_name=filename,
        mime=mime_type,
        use_container_width=True
    )

def format_job_status_text(status: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è"""
    status_texts = {
        'COMPLETED': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        'ERROR': '–û—à–∏–±–∫–∞',
        'PROCESSING': '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
        'QUEUED': '–í –æ—á–µ—Ä–µ–¥–∏'
    }
    return status_texts.get(status, status)

def get_language_name(language_code: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ –∫–æ–¥—É"""
    languages = {
        'RU': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
        'EN': 'üá∫üá∏ English',
        'UNKNOWN': 'üåê –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'
    }
    return languages.get(language_code, language_code)

def get_summary_depth_name(depth: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –∞–Ω–∞–ª–∏–∑–∞"""
    depths = {
        'BULLET': 'üìã –ö—Ä–∞—Ç–∫–∏–π',
        'DETAILED': 'üìñ –ü–æ–¥—Ä–æ–±–Ω—ã–π'
    }
    return depths.get(depth, depth)

def estimate_analysis_cost(text_length: int, model_price: float) -> float:
    """–û—Ü–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞"""
    pages = calculate_pages_from_text_length(text_length)
    return pages * model_price

def calculate_pages_from_text_length(text_length: int) -> int:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –¥–ª–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞"""
    # –ü—Ä–∏–º–µ—Ä–Ω–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return max(1, text_length // 2000)

def format_file_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
    if size_bytes < 1024:
        return f"{size_bytes} B"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.1f} KB"
    else:
        return f"{size_bytes / (1024 * 1024):.1f} MB"

def truncate_text(text: str, max_length: int = 100) -> str:
    """–û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length] + "..."

class SessionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    
    @staticmethod
    def init_session_state():
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        if 'page_refresh_counter' not in st.session_state:
            st.session_state.page_refresh_counter = 0
    
    @staticmethod
    def increment_refresh_counter():
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        st.session_state.page_refresh_counter += 1
    
    @staticmethod
    def clear_cache():
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à"""
        st.cache_data.clear()
    
    @staticmethod
    def force_refresh():
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        st.cache_data.clear()
        st.rerun()

def safe_get(dictionary: Dict[str, Any], key: str, default: Any = None) -> Any:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
    return dictionary.get(key, default) if dictionary else default

def filter_jobs_by_status(jobs: List[Dict[str, Any]], status_filter: List[str]) -> List[Dict[str, Any]]:
    """–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    if not status_filter:
        return jobs
    
    return [job for job in jobs if job.get('status') in status_filter]

def sort_jobs_by_date(jobs: List[Dict[str, Any]], ascending: bool = False) -> List[Dict[str, Any]]:
    """–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ –¥–∞—Ç–µ"""
    return sorted(
        jobs, 
        key=lambda x: x.get('started_at', ''), 
        reverse=not ascending
    )

def get_unique_statuses(jobs: List[Dict[str, Any]]) -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π"""
    statuses = set()
    for job in jobs:
        if job.get('status'):
            statuses.add(job['status'])
    return sorted(list(statuses))