import streamlit as st
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.auth_service import protected_page, check_authentication, show_user_info, init_session_state
from services.api_client import get_api_client
from utils.helpers import (
    calculate_pages_from_text, calculate_tokens_from_text, validate_file_size, is_supported_file,
    format_currency, get_language_name, get_summary_depth_name,
    show_success_message, show_error_message, calculate_pages_from_file_size, 
    calculate_tokens_from_file_size, get_file_extension
)
from utils.style_loader import load_theme

load_theme()


init_session_state()
if not check_authentication():
    st.error("üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
    st.info("üëà –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É")
    st.stop()

st.title("–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤")

api_client = get_api_client()

@st.cache_data(ttl=300) 
def get_available_models():
    try:
        return api_client.get_available_models()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        return []

models = get_available_models()

@st.cache_data(ttl=30)
def get_user_balance():
    try:
        wallet_info = api_client.get_wallet_info()
        return float(wallet_info.get('balance', 0))
    except Exception as e:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")
        return 0.0

user_balance = get_user_balance()

col1, col2 = st.columns([1, 2])
with col1:
    st.metric("üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å", format_currency(user_balance))
with col2:
    st.markdown("")

st.markdown("### üìÑ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

input_method = st.radio(
    "",
    ["üìù –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é", "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"],
    horizontal=True
)

uploaded_file = None
if input_method == "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
    st.markdown("#### üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
    
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        type=['txt', 'pdf', 'doc', 'docx'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: TXT, PDF, DOC, DOCX (–º–∞–∫—Å. 10 –ú–ë)",
        accept_multiple_files=False
    )
    
    if uploaded_file:
        file_size = len(uploaded_file.getvalue())
        
        if not validate_file_size(uploaded_file.getvalue(), 10):
            st.error("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 –ú–ë")
        elif not is_supported_file(uploaded_file.name):
            st.error("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!")
        else:
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            
            col1, col2 = st.columns(2)
            with col1:
                st.write(f"üìÅ **–ò–º—è —Ñ–∞–π–ª–∞:** {uploaded_file.name}")
                st.write(f"üìè **–†–∞–∑–º–µ—Ä:** {file_size/1024:.1f} –ö–ë")
            with col2:
                pass
                st.write(f"üóÇÔ∏è **–¢–∏–ø:** {uploaded_file.type}")

with st.form("prediction_form", clear_on_submit=False):
    document_text = ""
    filename = ""
    estimated_pages = 0
    
    if input_method == "üìù –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é":
        st.markdown("#### ‚úèÔ∏è –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞")
        
        document_text = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞:",
            height=300,
            help="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)",
            placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞..."
        )
        
        filename = st.text_input(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏ 2024.txt"
        )

        if document_text:
            char_count = len(document_text)
            word_count = len(document_text.split())
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üìù –°–∏–º–≤–æ–ª–æ–≤", char_count)
            with col2:
                st.metric("üìñ –°–ª–æ–≤", word_count)
            with col3:
                pass
    
    st.markdown("---")
    
    st.markdown("#### ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    col1, col2 = st.columns(2)
    
    language = "RU"
    
    with col1:
        if models:
            if 'price_per_token' in models[0]:
                model_options = [(model['name'], model['price_per_token'], model['id']) for model in models]
                price_label = "1000 —Ç–æ–∫–µ–Ω–æ–≤"
                display_price_func = lambda x: f"{model_options[x][0]} ({format_currency(model_options[x][1] * 1000)}/{price_label})"
            else:
                model_options = [(model['name'], model.get('price_per_page', 1), model['id']) for model in models]
                price_label = "—Å—Ç—Ä"
                display_price_func = lambda x: f"{model_options[x][0]} ({format_currency(model_options[x][1])}/{price_label})"
                
            selected_model_idx = st.selectbox(
                "ü§ñ –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞:",
                range(len(model_options)),
                format_func=display_price_func,
                help="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            )
            model_name, model_price, model_id = model_options[selected_model_idx]
        else:
            model_name = "default_model"
            model_price = 1.0
            st.selectbox("ü§ñ –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞:", ["default_model (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)"])
    
    with col2:
        summary_depth = st.selectbox(
            "üìä –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞:",
            ["BULLET", "DETAILED"],
            format_func=get_summary_depth_name,
            help="–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏, –ø–æ–¥—Ä–æ–±–Ω—ã–π - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç—á–µ—Ç"
        )
    
    if (document_text or uploaded_file) and models:
        try:
            if document_text:
                estimate = api_client.estimate_cost(text=document_text)
            elif uploaded_file:
                file_content = uploaded_file.getvalue()
                estimate = api_client.estimate_cost(file_content=file_content, filename=uploaded_file.name)
            
            api_token_count = estimate.get('token_count', 0)
            estimated_cost = estimate.get('estimated_cost', 0)
            
            if 'price_per_token' in models[0]:
                billing_unit = "—Ç–æ–∫–µ–Ω–æ–≤"
                billing_count = api_token_count
                price_per_unit = model_price * 1000 
                price_unit_label = "1000 —Ç–æ–∫–µ–Ω–æ–≤"
            else:
                billing_unit = "—Å—Ç—Ä–∞–Ω–∏—Ü"
                billing_count = estimated_pages
                price_per_unit = model_price
                price_unit_label = "—Å—Ç—Ä–∞–Ω–∏—Ü—É"
                
        except Exception as e:
            st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {str(e)}")
            st.info("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ - —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
            api_token_count = 0
            estimated_cost = 0
            billing_unit = "—Ç–æ–∫–µ–Ω–æ–≤"
            billing_count = 0
            price_per_unit = model_price * 1000 if 'price_per_token' in models[0] else model_price
            price_unit_label = "1000 —Ç–æ–∫–µ–Ω–æ–≤" if 'price_per_token' in models[0] else "—Å—Ç—Ä–∞–Ω–∏—Ü—É"
        
        st.markdown("#### üí∞ –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric(f"üî¢ {billing_unit.capitalize()}", billing_count)
        with col2:
            st.metric(f"üíµ –ó–∞ {price_unit_label}", format_currency(price_per_unit))
        with col3:
            st.metric("üí∞ –ò—Ç–æ–≥–æ", format_currency(estimated_cost))
        with col4:
            balance_after = user_balance - estimated_cost
            st.metric(
                "üè¶ –û—Å—Ç–∞–Ω–µ—Ç—Å—è",
                format_currency(balance_after),
                delta=format_currency(-estimated_cost) if balance_after >= 0 else None
            )
        
        if estimated_cost > user_balance:
            st.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –¢—Ä–µ–±—É–µ—Ç—Å—è: {format_currency(estimated_cost)}, –¥–æ—Å—Ç—É–ø–Ω–æ: {format_currency(user_balance)}")
            st.info("üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ö–æ—à–µ–ª–µ–∫' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
    
    st.markdown("---")

    col1, col2 = st.columns([2, 1])
    with col1:
        submitted = st.form_submit_button(
            "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", 
            use_container_width=True,
            type="primary"
        )
    
    with col2:
        if st.form_submit_button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É", use_container_width=True):
            st.rerun()

    if submitted:
        error_messages = []
        
        if input_method == "üìù –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é":
            if not document_text or len(document_text.strip()) < 10:
                error_messages.append("–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤")
            if len(document_text) > 1000000:
                error_messages.append("–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1,000,000 —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            if not uploaded_file:
                error_messages.append("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            elif not validate_file_size(uploaded_file.getvalue(), 10):
                error_messages.append("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10 –ú–ë)")
            elif not is_supported_file(uploaded_file.name):
                error_messages.append("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
        
        
        if error_messages:
            for msg in error_messages:
                st.error(f"‚ùå {msg}")
        else:

            try:
                with st.spinner("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑..."):
                    if input_method == "üìù –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é":
 
                        prediction_data = {
                            "document_text": document_text,
                            "filename": filename or "manual_input.txt",
                            "language": language,
                            "model_name": model_name,
                            "summary_depth": summary_depth
                        }
                        
                        response = api_client.create_prediction(prediction_data)
                    
                    else:
                        file_content = uploaded_file.getvalue()
                        response = api_client.upload_file_prediction(
                            file_content, 
                            uploaded_file.name, 
                            language
                        )
                

                st.success("üéâ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

                st.cache_data.clear()
                
                st.markdown("### ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ")
                
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞", format_currency(response['cost']))
                with col2:
                    status_text = {
                        'QUEUED': '–í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É',
                        'queued': '–í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É',
                        'PROCESSING': '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è',
                        'processing': '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è',
                        'DONE': '–ó–∞–≤–µ—Ä—à–µ–Ω',
                        'done': '–ó–∞–≤–µ—Ä—à–µ–Ω',
                        'COMPLETED': '–ó–∞–≤–µ—Ä—à–µ–Ω',
                        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
                        'ERROR': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
                        'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ'
                    }.get(response['status'], response['status'])
                    st.metric("üìä –°—Ç–∞—Ç—É—Å", status_text)

                st.info(f"üìù {response.get('message', '–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É')}")
                
                st.session_state.analysis_created = True
                st.session_state.job_id = response['job_id']
                
            except Exception as e:
                error_msg = str(e)
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {error_msg}")
                
                if "Insufficient balance" in error_msg:
                    st.info("üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
                    st.session_state.show_wallet_button = True
                
                elif "queue" in error_msg.lower():
                    st.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
                else:
                    st.info("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")

if st.session_state.get('analysis_created', False):
    st.markdown("---")
    st.markdown("### üéØ –°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è")
    
    if st.session_state.get('job_id'):
        job_id = st.session_state.job_id
        
        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", use_container_width=True, key="check_status"):
                try:
                    job_details = api_client.get_job_details(job_id)
                    status = job_details.get('status', 'UNKNOWN')
                    
                    if status == 'DONE':
                        st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                        
                        if job_details.get('summary_text'):
                            st.markdown("**üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:**")
                            st.text_area(
                                "–ü–æ–ª–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:",
                                job_details['summary_text'],
                                height=300,
                                disabled=True
                            )
                            
                            import json
                            from datetime import datetime
                            
                            risk_index = f"{job_details['risk_score']*100:.1f}%" if job_details.get('risk_score') else 'N/A'
                            
                            risk_clauses_text = ""
                            if job_details.get('risk_clauses'):
                                risk_clauses_text = "\n".join([
                                    f"{i+1}. [{clause.get('risk_level', 'UNKNOWN')}] {clause.get('clause_text', '')}\n   –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {clause.get('explanation', '–ù–µ—Ç –ø–æ—è—Å–Ω–µ–Ω–∏—è')}"
                                    for i, clause in enumerate(job_details.get('risk_clauses', []))
                                ])
                            else:
                                risk_clauses_text = "–†–∏—Å–∫–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã"
                            
                            full_report = f"""–û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –î–û–ì–û–í–û–†–ê
====================================

–û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
-----------------
–°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω
–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

–§–ò–ù–ê–ù–°–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
---------------------
–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: {format_currency(float(job_details.get('used_credits', 0)))}
–†–∏—Å–∫-–∏–Ω–¥–µ–∫—Å: {risk_index}

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:
------------------
{job_details.get('summary_text', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')}

–í–´–Ø–í–õ–ï–ù–ù–´–ï –†–ò–°–ö–û–í–´–ï –ü–£–ù–ö–¢–´:
--------------------------
{risk_clauses_text}

–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ v2.0
"""
                            
                            st.download_button(
                                label="üìÑ –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç",
                                data=full_report,
                                file_name=f"analysis_report_{job_id}_{datetime.now().strftime('%Y%m%d')}.txt",
                                mime="text/plain",
                                use_container_width=True
                            )
                        
                        if job_details.get('risk_score') is not None:
                            risk_percent = job_details['risk_score'] * 100
                            st.metric("üéØ –†–∏—Å–∫-–∏–Ω–¥–µ–∫—Å", f"{risk_percent:.1f}%")
                            
                        if job_details.get('risk_clauses'):
                            unique_clauses = []
                            seen_texts = set()
                            for clause in job_details['risk_clauses']:
                                clause_text = clause.get('clause_text', '')
                                if clause_text and clause_text not in seen_texts:
                                    seen_texts.add(clause_text)
                                    unique_clauses.append(clause)
                            
                            st.write(f"**‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ä–∏—Å–∫–æ–≤:** {len(unique_clauses)}")
                            
                            if unique_clauses:
                                st.markdown("**üö® –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã:**")
                                for i, clause in enumerate(unique_clauses, 1):
                                    risk_level = clause.get('risk_level', 'UNKNOWN')
                                    risk_colors = {
                                        'HIGH': '#dc3545',
                                        'MEDIUM': '#ffc107', 
                                        'LOW': '#28a745'
                                    }
                                    risk_color = risk_colors.get(risk_level, '#6c757d')
                                    
                                    risk_level_text = {
                                        'HIGH': '–í—ã—Å–æ–∫–∏–π',
                                        'MEDIUM': '–°—Ä–µ–¥–Ω–∏–π',
                                        'LOW': '–ù–∏–∑–∫–∏–π'
                                    }.get(risk_level, risk_level)
                                    
                                    st.markdown(f"""
                                    <div style="border-left: 3px solid {risk_color}; padding-left: 0.5rem; margin: 0.5rem 0;">
                                    <strong>{i}. –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level_text}</strong><br>
                                    {clause.get('clause_text', '–¢–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}
                                    </div>
                                    """, unsafe_allow_html=True)
                                    
                                    if clause.get('explanation'):
                                        st.write(f"*üí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {clause['explanation']}*")
                                    
                                    if i < len(unique_clauses):
                                        st.markdown("---")
                    
                    elif status == 'PROCESSING':
                        st.info("üîÑ –ê–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")
                    elif status == 'QUEUED':
                        st.info("‚è≥ –ê–Ω–∞–ª–∏–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏...")
                    elif status == 'ERROR':
                        st.error("‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
                    else:
                        st.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
                        
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        
        with col2:
            if st.button("üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å—Ç–æ—Ä–∏–∏", use_container_width=True, key="goto_history"):
                st.session_state.analysis_created = False
                st.switch_page("pages/History.py")
        
        with col3:
            if st.button("üìù –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –∞–Ω–∞–ª–∏–∑", use_container_width=True, key="create_new"):
                st.session_state.analysis_created = False
                st.rerun()
    else:
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å—Ç–æ—Ä–∏–∏", use_container_width=True, key="goto_history"):
                st.session_state.analysis_created = False
                st.switch_page("pages/History.py")
        
        with col2:
            if st.button("üìù –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –∞–Ω–∞–ª–∏–∑", use_container_width=True, key="create_new"):
                st.session_state.analysis_created = False
                st.rerun()

if st.session_state.get('show_wallet_button', False):
    st.markdown("---")
    if st.button("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ—à–µ–ª—å–∫—É", use_container_width=True, key="goto_wallet"):
        st.session_state.show_wallet_button = False
        st.switch_page("pages/Wallet.py")

with st.sidebar:
    st.markdown('<h1 class="sidebar-main-title">–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤</h1>', unsafe_allow_html=True)
    st.markdown("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    st.markdown("---")
    
    show_user_info()
    
    if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", use_container_width=True, disabled=True):
        pass 
    if st.button("–ò—Å—Ç–æ—Ä–∏—è", use_container_width=True):
        st.switch_page("pages/History.py")
    if st.button("–ë–∞–ª–∞–Ω—Å", use_container_width=True):
        st.switch_page("pages/Wallet.py")