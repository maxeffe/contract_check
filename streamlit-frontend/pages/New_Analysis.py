import streamlit as st
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.auth_service import protected_page, check_authentication, show_user_info
from services.api_client import get_api_client
from utils.helpers import (
    calculate_pages_from_text, validate_file_size, is_supported_file,
    format_currency, get_language_name, get_summary_depth_name,
    show_success_message, show_error_message
)
from utils.style_loader import load_theme

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—É –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è Streamlit —ç–ª–µ–º–µ–Ω—Ç–æ–≤
load_theme()

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï SIDEBAR - –ß–ï–†–ù–´–ô –§–û–ù –° –°–ï–†–´–ú–ò –ö–ù–û–ü–ö–ê–ú–ò
st.markdown("""
<style>
/* SIDEBAR: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ê–ì–†–ï–°–°–ò–í–ù–û –ß–ï–†–ù–´–ô - –í–°–ï –≠–õ–ï–ú–ï–ù–¢–´ */
section[data-testid="stSidebar"] *,
section[data-testid="stSidebar"],
section[data-testid="stSidebar"] > div,
section[data-testid="stSidebar"] > div > div,
section[data-testid="stSidebar"] > div > div > div,
section[data-testid="stSidebar"] > div > div > div > div,
[data-testid="stSidebar"] *,
[data-testid="stSidebar"],
[data-testid="stSidebar"] > div,
[data-testid="stSidebar"] > div > div,
.css-1d391kg, .css-1lcbmhc, .css-1aumxhk {
    background: #1a1a1a !important;
    background-color: #1a1a1a !important;
}

/* –ù–ï –î–ê–í–ê–¢–¨ –ö–ù–û–ü–ö–ê–ú –ò –ò–• –¢–ï–ö–°–¢–£ –ù–ê–°–õ–ï–î–û–í–ê–¢–¨ –ß–ï–†–ù–´–ô –§–û–ù */
section[data-testid="stSidebar"] button,
section[data-testid="stSidebar"] .stButton > button {
    background: #555555 !important;
    background-color: #555555 !important;
}

/* –ü–†–û–ó–†–ê–ß–ù–´–ô –§–û–ù –î–õ–Ø –¢–ï–ö–°–¢–ê –í–ù–£–¢–†–ò –ö–ù–û–ü–û–ö SIDEBAR */
section[data-testid="stSidebar"] button *,
section[data-testid="stSidebar"] .stButton > button *,
section[data-testid="stSidebar"] button div,
section[data-testid="stSidebar"] button span {
    background: transparent !important;
    background-color: transparent !important;
    color: #ffffff !important;
}

/* SIDEBAR: –ö–ù–û–ü–ö–ò - –°–ï–†–´–ï –° –ß–ï–¢–ö–ò–ú –ë–ï–õ–´–ú –¢–ï–ö–°–¢–û–ú */
section[data-testid="stSidebar"] button,
section[data-testid="stSidebar"] .stButton > button,
section[data-testid="stSidebar"] [role="button"] {
    background-color: #555555 !important;
    color: #ffffff !important;
    border: 2px solid #777777 !important;
    font-weight: 600 !important;
    font-size: 14px !important;
}

section[data-testid="stSidebar"] button:hover,
section[data-testid="stSidebar"] .stButton > button:hover {
    background-color: #666666 !important;
    color: #ffffff !important;
    border: 2px solid #888888 !important;
}

/* SIDEBAR: –ë–ï–õ–´–ô –¢–ï–ö–°–¢ */
section[data-testid="stSidebar"] .stMarkdown,
section[data-testid="stSidebar"] h1,
section[data-testid="stSidebar"] p,
section[data-testid="stSidebar"] div {
    color: #ffffff !important;
}
</style>
""", unsafe_allow_html=True)

# –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞—â–∏—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if check_authentication():
    show_user_info()
else:
    st.error("üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
    st.stop()

st.title("–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤")

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
api_client = get_api_client()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
@st.cache_data(ttl=300)  # –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
def get_available_models():
    try:
        return api_client.get_available_models()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        return []

models = get_available_models()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@st.cache_data(ttl=30)
def get_user_balance():
    try:
        wallet_info = api_client.get_wallet_info()
        return float(wallet_info.get('balance', 0))
    except Exception as e:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")
        return 0.0

user_balance = get_user_balance()

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
col1, col2 = st.columns([2, 1])
with col1:
    st.markdown("")  # –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞
with col2:
    st.metric("üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å", format_currency(user_balance))

# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞
st.markdown("### üìÑ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

input_method = st.radio(
    "",
    ["üìù –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é", "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"],
    horizontal=True
)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ –∞–Ω–∞–ª–∏–∑–∞
with st.form("prediction_form", clear_on_submit=False):
    document_text = ""
    filename = ""
    uploaded_file = None
    estimated_pages = 0
    
    if input_method == "üìù –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é":
        st.markdown("#### ‚úèÔ∏è –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞")
        
        document_text = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞:",
            height=300,
            help="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)",
            placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞..."
        )
        
        filename = st.text_input(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏ 2024.txt"
        )
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü
        if document_text:
            char_count = len(document_text)
            word_count = len(document_text.split())
            estimated_pages = calculate_pages_from_text(document_text)
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üìù –°–∏–º–≤–æ–ª–æ–≤", char_count)
            with col2:
                st.metric("üìñ –°–ª–æ–≤", word_count)
            with col3:
                st.metric("üìÑ –°—Ç—Ä–∞–Ω–∏—Ü", estimated_pages)
        
    else:  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        st.markdown("#### üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
        
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            type=['txt', 'pdf', 'doc', 'docx'],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: TXT, PDF, DOC, DOCX (–º–∞–∫—Å. 10 –ú–ë)",
            accept_multiple_files=False
        )
        
        if uploaded_file:
            file_size = len(uploaded_file.getvalue())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if not validate_file_size(uploaded_file.getvalue(), 10):
                st.error("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 –ú–ë")
            elif not is_supported_file(uploaded_file.name):
                st.error("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!")
            else:
                st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"üìÅ **–ò–º—è —Ñ–∞–π–ª–∞:** {uploaded_file.name}")
                    st.write(f"üìè **–†–∞–∑–º–µ—Ä:** {file_size/1024:.1f} –ö–ë")
                with col2:
                    # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
                    estimated_pages = max(1, file_size // 2000)  # –ü—Ä–∏–º–µ—Ä–Ω–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    st.write(f"üìÑ **–ü—Ä–∏–º–µ—Ä–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü:** {estimated_pages}")
                    st.write(f"üóÇÔ∏è **–¢–∏–ø:** {uploaded_file.type}")
    
    st.markdown("---")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
    st.markdown("#### ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        language = st.selectbox(
            "üåê –Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞:",
            ["UNKNOWN", "RU", "EN"],
            format_func=get_language_name,
            help="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
        )
    
    with col2:
        if models:
            model_options = [(model['name'], model['price_per_page'], model['id']) for model in models]
            selected_model_idx = st.selectbox(
                "ü§ñ –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞:",
                range(len(model_options)),
                format_func=lambda x: f"{model_options[x][0]} ({format_currency(model_options[x][1])}/—Å—Ç—Ä)",
                help="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            )
            model_name, model_price, model_id = model_options[selected_model_idx]
        else:
            model_name = "default_model"
            model_price = 1.0
            st.selectbox("ü§ñ –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞:", ["default_model (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)"])
    
    with col3:
        summary_depth = st.selectbox(
            "üìä –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞:",
            ["BULLET", "DETAILED"],
            format_func=get_summary_depth_name,
            help="–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏, –ø–æ–¥—Ä–æ–±–Ω—ã–π - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç—á–µ—Ç"
        )
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    if (document_text or uploaded_file) and models:
        if document_text:
            estimated_pages = calculate_pages_from_text(document_text)
        elif uploaded_file:
            file_size = len(uploaded_file.getvalue())
            estimated_pages = max(1, file_size // 2000)
        
        estimated_cost = estimated_pages * model_price
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        st.markdown("#### üí∞ –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üìÑ –°—Ç—Ä–∞–Ω–∏—Ü", estimated_pages)
        with col2:
            st.metric("üíµ –ó–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É", format_currency(model_price))
        with col3:
            st.metric("üí∞ –ò—Ç–æ–≥–æ", format_currency(estimated_cost))
        with col4:
            balance_after = user_balance - estimated_cost
            st.metric(
                "üè¶ –û—Å—Ç–∞–Ω–µ—Ç—Å—è",
                format_currency(balance_after),
                delta=format_currency(-estimated_cost) if balance_after >= 0 else None
            )
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
        if estimated_cost > user_balance:
            st.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –¢—Ä–µ–±—É–µ—Ç—Å—è: {format_currency(estimated_cost)}, –¥–æ—Å—Ç—É–ø–Ω–æ: {format_currency(user_balance)}")
            st.info("üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ö–æ—à–µ–ª–µ–∫' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
    
    st.markdown("---")
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    col1, col2 = st.columns([2, 1])
    with col1:
        submitted = st.form_submit_button(
            "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", 
            use_container_width=True,
            type="primary"
        )
    
    with col2:
        if st.form_submit_button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É", use_container_width=True):
            st.rerun()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    if submitted:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        error_messages = []
        
        if input_method == "üìù –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é":
            if not document_text or len(document_text.strip()) < 10:
                error_messages.append("–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤")
            if len(document_text) > 1000000:
                error_messages.append("–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1,000,000 —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            if not uploaded_file:
                error_messages.append("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            elif not validate_file_size(uploaded_file.getvalue(), 10):
                error_messages.append("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10 –ú–ë)")
            elif not is_supported_file(uploaded_file.name):
                error_messages.append("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if models and estimated_cost > user_balance:
            error_messages.append(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (—Ç—Ä–µ–±—É–µ—Ç—Å—è {format_currency(estimated_cost)})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        if error_messages:
            for msg in error_messages:
                st.error(f"‚ùå {msg}")
        else:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            try:
                with st.spinner("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑..."):
                    if input_method == "üìù –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é":
                        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
                        prediction_data = {
                            "document_text": document_text,
                            "filename": filename or "manual_input.txt",
                            "language": language,
                            "model_name": model_name,
                            "summary_depth": summary_depth
                        }
                        
                        response = api_client.create_prediction(prediction_data)
                    
                    else:
                        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª
                        file_content = uploaded_file.getvalue()
                        response = api_client.upload_file_prediction(
                            file_content, 
                            uploaded_file.name, 
                            language
                        )
                
                # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                st.success("üéâ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
                
                # –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
                st.cache_data.clear()
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
                st.markdown("### ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ")
                
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("üÜî ID –∑–∞–¥–∞—á–∏", response['job_id'])
                    st.metric("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å", format_currency(response['cost']))
                with col2:
                    st.metric("üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", response['pages_processed'])
                    st.metric("üìä –°—Ç–∞—Ç—É—Å", response['status'])
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                st.info(f"üìù {response.get('message', '–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É')}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
                st.session_state.analysis_created = True
                st.session_state.job_id = response['job_id']
                
            except Exception as e:
                error_msg = str(e)
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {error_msg}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
                if "Insufficient balance" in error_msg:
                    st.info("üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
                    st.session_state.show_wallet_button = True
                
                elif "queue" in error_msg.lower():
                    st.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
                else:
                    st.info("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")

# –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤–Ω–µ —Ñ–æ—Ä–º—ã
if st.session_state.get('analysis_created', False):
    st.markdown("---")
    st.markdown("### üéØ –°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å—Ç–æ—Ä–∏–∏", use_container_width=True, key="goto_history"):
            st.session_state.analysis_created = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            st.switch_page("pages/History.py")
    
    with col2:
        if st.button("üìù –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –∞–Ω–∞–ª–∏–∑", use_container_width=True, key="create_new"):
            st.session_state.analysis_created = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            st.rerun()

# –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–æ—à–µ–ª—å–∫—É –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –±–∞–ª–∞–Ω—Å–∞
if st.session_state.get('show_wallet_button', False):
    st.markdown("---")
    if st.button("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ—à–µ–ª—å–∫—É", use_container_width=True, key="goto_wallet"):
        st.session_state.show_wallet_button = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        st.switch_page("pages/Wallet.py")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    if st.button("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", use_container_width=True):
        st.switch_page("app.py")