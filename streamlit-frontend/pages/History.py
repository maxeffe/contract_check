import streamlit as st
import sys
import os
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.auth_service import check_authentication, show_user_info
from services.api_client import get_api_client
from utils.helpers import (
    format_datetime, format_currency, format_percentage,
    get_status_emoji, format_job_status_text, get_unique_statuses,
    filter_jobs_by_status, sort_jobs_by_date, SessionManager
)
from components.visualization import (
    display_job_metrics, create_status_pie_chart, create_risk_histogram,
    create_cost_timeline, format_status_badge
)
from utils.style_loader import load_theme
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—É –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è Streamlit —ç–ª–µ–º–µ–Ω—Ç–æ–≤
load_theme()

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï SIDEBAR - –ß–ï–†–ù–´–ô –§–û–ù –° –°–ï–†–´–ú–ò –ö–ù–û–ü–ö–ê–ú–ò
st.markdown("""
<style>
/* SIDEBAR: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ê–ì–†–ï–°–°–ò–í–ù–û –ß–ï–†–ù–´–ô - –í–°–ï –≠–õ–ï–ú–ï–ù–¢–´ */
section[data-testid="stSidebar"] *,
section[data-testid="stSidebar"],
section[data-testid="stSidebar"] > div,
section[data-testid="stSidebar"] > div > div,
section[data-testid="stSidebar"] > div > div > div,
section[data-testid="stSidebar"] > div > div > div > div,
[data-testid="stSidebar"] *,
[data-testid="stSidebar"],
[data-testid="stSidebar"] > div,
[data-testid="stSidebar"] > div > div,
.css-1d391kg, .css-1lcbmhc, .css-1aumxhk {
    background: #1a1a1a !important;
    background-color: #1a1a1a !important;
}

/* –ù–ï –î–ê–í–ê–¢–¨ –ö–ù–û–ü–ö–ê–ú –ò –ò–• –¢–ï–ö–°–¢–£ –ù–ê–°–õ–ï–î–û–í–ê–¢–¨ –ß–ï–†–ù–´–ô –§–û–ù */
section[data-testid="stSidebar"] button,
section[data-testid="stSidebar"] .stButton > button {
    background: #555555 !important;
    background-color: #555555 !important;
}

/* –ü–†–û–ó–†–ê–ß–ù–´–ô –§–û–ù –î–õ–Ø –¢–ï–ö–°–¢–ê –í–ù–£–¢–†–ò –ö–ù–û–ü–û–ö SIDEBAR */
section[data-testid="stSidebar"] button *,
section[data-testid="stSidebar"] .stButton > button *,
section[data-testid="stSidebar"] button div,
section[data-testid="stSidebar"] button span {
    background: transparent !important;
    background-color: transparent !important;
    color: #ffffff !important;
}

/* SIDEBAR: –ö–ù–û–ü–ö–ò - –°–ï–†–´–ï –° –ß–ï–¢–ö–ò–ú –ë–ï–õ–´–ú –¢–ï–ö–°–¢–û–ú */
section[data-testid="stSidebar"] button,
section[data-testid="stSidebar"] .stButton > button,
section[data-testid="stSidebar"] [role="button"] {
    background-color: #555555 !important;
    color: #ffffff !important;
    border: 2px solid #777777 !important;
    font-weight: 600 !important;
    font-size: 14px !important;
}

section[data-testid="stSidebar"] button:hover,
section[data-testid="stSidebar"] .stButton > button:hover {
    background-color: #666666 !important;
    color: #ffffff !important;
    border: 2px solid #888888 !important;
}

/* SIDEBAR: –ë–ï–õ–´–ô –¢–ï–ö–°–¢ */
section[data-testid="stSidebar"] .stMarkdown,
section[data-testid="stSidebar"] h1,
section[data-testid="stSidebar"] p,
section[data-testid="stSidebar"] div {
    color: #ffffff !important;
}
</style>
""", unsafe_allow_html=True)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
if check_authentication():
    show_user_info()
else:
    st.error("üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
    st.stop()

st.title("–ò—Å—Ç–æ—Ä–∏—è")
st.markdown("–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∏ –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
api_client = get_api_client()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
col1, col2 = st.columns([4, 1])
with col1:
    st.markdown("### üìä –í–∞—à–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏")
with col2:
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
        SessionManager.clear_cache()
        st.rerun()

# –§–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
with st.expander("üîß –§–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", expanded=False):
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        limit = st.selectbox(
            "üìä –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–µ–π:",
            [10, 20, 50, 100],
            index=1,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"
        )
    
    with col2:
        status_filter = st.multiselect(
            "üìà –°—Ç–∞—Ç—É—Å:",
            ["COMPLETED", "ERROR", "PROCESSING", "QUEUED"],
            default=[],
            help="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –∞–Ω–∞–ª–∏–∑–∞"
        )
    
    with col3:
        show_details = st.checkbox(
            "üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏",
            value=True,
            help="–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
        )
    
    with col4:
        show_charts = st.checkbox(
            "üìä –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏",
            value=True,
            help="–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏"
        )

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@st.cache_data(ttl=30)  # –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
def load_prediction_history(limit_param):
    try:
        return api_client.get_prediction_history(limit=limit_param)
    except Exception as e:
        error_msg = str(e)
        if "500" in error_msg:
            st.error("‚ùå –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            st.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        elif "404" in error_msg:
            st.warning("‚ö†Ô∏è Endpoint –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif "401" in error_msg or "403" in error_msg:
            st.error("üîí –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.")
        else:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {error_msg}")
        return {"jobs": [], "total_count": 0}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
with st.spinner("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤..."):
    history_data = load_prediction_history(limit)

jobs = history_data.get("jobs", [])
total_count = history_data.get("total_count", 0)

if not jobs:
    st.info("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üìù –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑", use_container_width=True, type="primary"):
            st.switch_page("pages/New_Analysis.py")
    
    with col2:
        if st.button("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", use_container_width=True):
            st.switch_page("app.py")
    
    st.stop()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
filtered_jobs = filter_jobs_by_status(jobs, status_filter) if status_filter else jobs
filtered_jobs = sort_jobs_by_date(filtered_jobs, ascending=False)

st.info(f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered_jobs)} –∏–∑ {total_count} –∞–Ω–∞–ª–∏–∑–æ–≤")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
if filtered_jobs:
    display_job_metrics(filtered_jobs)
    

# –¢–∞–±–ª–∏—Ü–∞ —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏
st.markdown("### üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤")

# –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
display_data = []
for job in filtered_jobs:
    display_data.append({
        'ID': job.get('id', 'N/A'),
        '–°—Ç–∞—Ç—É—Å': format_status_badge(job.get('status', 'UNKNOWN')),
        '–†–∏—Å–∫-–∏–Ω–¥–µ–∫—Å': f"{job['risk_score']*100:.1f}%" if job.get('risk_score') is not None else "N/A",
        '–°—Ç–æ–∏–º–æ—Å—Ç—å': format_currency(float(job.get('used_credits', 0))),
        '–ì–ª—É–±–∏–Ω–∞': job.get('summary_depth', 'N/A'),
        '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': format_datetime(job.get('started_at', '')),
        '–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è': format_datetime(job.get('finished_at', '')) if job.get('finished_at') else "N/A"
    })

if display_data:
    df = pd.DataFrame(display_data)
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    st.dataframe(
        df,
        use_container_width=True,
        hide_index=True,
        column_config={
            "–°—Ç–∞—Ç—É—Å": st.column_config.TextColumn("–°—Ç–∞—Ç—É—Å", width="small"),
            "–†–∏—Å–∫-–∏–Ω–¥–µ–∫—Å": st.column_config.TextColumn("–†–∏—Å–∫-–∏–Ω–¥–µ–∫—Å", width="small"),
            "–°—Ç–æ–∏–º–æ—Å—Ç—å": st.column_config.TextColumn("–°—Ç–æ–∏–º–æ—Å—Ç—å", width="small"),
        }
    )

# –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
if show_details and filtered_jobs:
    st.markdown("### üîç –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    
    for job in filtered_jobs:
        job_id = job.get('id')
        status = job.get('status', 'UNKNOWN')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ä–∞–º–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
        border_colors = {
            'COMPLETED': '#28a745',
            'ERROR': '#dc3545',
            'PROCESSING': '#ffc107',
            'QUEUED': '#17a2b8'
        }
        border_color = border_colors.get(status, '#6c757d')
        
        with st.container():
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–º–∫—É —Å —Ü–≤–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞
            st.markdown(f"""
            <div style="border-left: 4px solid {border_color}; padding-left: 1rem; margin: 1rem 0;">
            """, unsafe_allow_html=True)
            
            with st.expander(
                f"{get_status_emoji(status)} –ê–Ω–∞–ª–∏–∑ #{job_id} - {format_job_status_text(status)}", 
                expanded=False
            ):
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.markdown("**üìä –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**")
                    st.write(f"**–°—Ç–∞—Ç—É—Å:** {format_job_status_text(status)}")
                    st.write(f"**–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞:** {job.get('summary_depth', 'N/A')}")
                
                with col2:
                    st.markdown("**üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
                    if job.get('used_credits'):
                        st.write(f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {format_currency(float(job['used_credits']))}")
                    if job.get('risk_score') is not None:
                        risk_percent = job['risk_score'] * 100
                        risk_level = "–í—ã—Å–æ–∫–∏–π" if risk_percent > 70 else "–°—Ä–µ–¥–Ω–∏–π" if risk_percent > 30 else "–ù–∏–∑–∫–∏–π"
                        st.write(f"**–†–∏—Å–∫-–∏–Ω–¥–µ–∫—Å:** {risk_percent:.1f}% ({risk_level})")
                
                with col3:
                    st.markdown("**üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏:**")
                    if job.get('started_at'):
                        st.write(f"**–°–æ–∑–¥–∞–Ω:** {format_datetime(job['started_at'])}")
                    if job.get('finished_at'):
                        st.write(f"**–ó–∞–≤–µ—Ä—à–µ–Ω:** {format_datetime(job['finished_at'])}")
                    
                    # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    if job.get('started_at') and job.get('finished_at'):
                        try:
                            start = datetime.fromisoformat(job['started_at'].replace('Z', '+00:00'))
                            end = datetime.fromisoformat(job['finished_at'].replace('Z', '+00:00'))
                            duration = end - start
                            st.write(f"**–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {duration.total_seconds():.1f} —Å–µ–∫")
                        except:
                            pass
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                if job.get('summary_text'):
                    st.markdown("**üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:**")
                    st.text_area(
                        "–°–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:",
                        job['summary_text'],
                        height=200,
                        disabled=True,
                        key=f"summary_{job_id}"
                    )
                
                # –†–∏—Å–∫–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã
                if job.get('risk_clauses') and len(job['risk_clauses']) > 0:
                    st.markdown("**‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã:**")
                    
                    for i, clause in enumerate(job['risk_clauses'], 1):
                        risk_level = clause.get('risk_level', 'UNKNOWN')
                        risk_colors = {
                            'HIGH': '#dc3545',
                            'MEDIUM': '#ffc107', 
                            'LOW': '#28a745'
                        }
                        risk_color = risk_colors.get(risk_level, '#6c757d')
                        
                        st.markdown(f"""
                        <div style="border-left: 3px solid {risk_color}; padding-left: 0.5rem; margin: 0.5rem 0;">
                        <strong>{i}. –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level}</strong><br>
                        {clause.get('clause_text', '–¢–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}
                        </div>
                        """, unsafe_allow_html=True)
                        
                        if clause.get('explanation'):
                            st.write(f"*üí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {clause['explanation']}*")
                        
                        if i < len(job['risk_clauses']):
                            st.markdown("---")
                
                # –î–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                if job.get('summary_text'):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        if st.button(f"üìÑ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", key=f"export_{job_id}"):
                            risk_index = f"{job['risk_score']*100:.1f}%" if job.get('risk_score') else 'N/A'
                            risk_clauses_text = chr(10).join([f"{i+1}. {clause.get('clause_text', '')}" for i, clause in enumerate(job.get('risk_clauses', []))]) if job.get('risk_clauses') else '–ù–µ –≤—ã—è–≤–ª–µ–Ω—ã'
                            
                            export_text = f"""–ê–ù–ê–õ–ò–ó –î–û–ì–û–í–û–†–ê #{job_id}
========================

–°—Ç–∞—Ç—É—Å: {format_job_status_text(status)}
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {format_datetime(job.get('started_at', ''))}
–†–∏—Å–∫-–∏–Ω–¥–µ–∫—Å: {risk_index}
–°—Ç–æ–∏–º–æ—Å—Ç—å: {format_currency(float(job.get('used_credits', 0)))}

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:
{job.get('summary_text', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

–†–∏—Å–∫–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã:
{risk_clauses_text}
"""
                            st.download_button(
                                label="üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                                data=export_text,
                                file_name=f"analysis_report_{job_id}_{datetime.now().strftime('%Y%m%d')}.txt",
                                mime="text/plain",
                                key=f"download_{job_id}"
                            )
                    
                    with col2:
                        # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                        if st.button(f"üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑", key=f"repeat_{job_id}"):
                            st.info("üîÑ –§—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")
            
            st.markdown("</div>", unsafe_allow_html=True)

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π)
if total_count > len(jobs):
    st.markdown("---")
    st.info(f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ {len(jobs)} –∏–∑ {total_count} –∑–∞–ø–∏—Å–µ–π")
    
    if st.button("üìà –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö"):
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
        new_limit = min(limit * 2, total_count)
        st.session_state.history_limit = new_limit
        SessionManager.clear_cache()
        st.rerun()

# –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
if filtered_jobs:
    st.markdown("---")
    st.markdown("### üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", use_container_width=True):
            csv_data = pd.DataFrame([{
                'ID': job.get('id'),
                '–°—Ç–∞—Ç—É—Å': job.get('status'),
                '–†–∏—Å–∫_–∏–Ω–¥–µ–∫—Å': job.get('risk_score'),
                '–°—Ç–æ–∏–º–æ—Å—Ç—å': job.get('used_credits'),
                '–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è': job.get('started_at'),
                '–î–∞—Ç–∞_–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è': job.get('finished_at'),
                '–°–≤–æ–¥–∫–∞': job.get('summary_text', '')[:100] + '...' if job.get('summary_text') else ''
            } for job in filtered_jobs]).to_csv(index=False)
            
            st.download_button(
                label="üíæ –°–∫–∞—á–∞—Ç—å CSV",
                data=csv_data,
                file_name=f"analysis_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
    
    with col2:
        if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", use_container_width=True):
            stats_text = f"""
–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–û–í
===================

–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {len(filtered_jobs)}
–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {len([j for j in filtered_jobs if j.get('status') == 'COMPLETED'])}
–û—à–∏–±–æ–∫: {len([j for j in filtered_jobs if j.get('status') == 'ERROR'])}
–í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len([j for j in filtered_jobs if j.get('status') == 'PROCESSING'])}

–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {sum([float(j.get('used_credits', 0)) for j in filtered_jobs]):.2f}‚ÇΩ
–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {sum([float(j.get('used_credits', 0)) for j in filtered_jobs])/len(filtered_jobs):.2f}‚ÇΩ

–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫-–∏–Ω–¥–µ–∫—Å: {sum([j.get('risk_score', 0) for j in filtered_jobs if j.get('risk_score')])/len([j for j in filtered_jobs if j.get('risk_score')])*100:.1f}%
"""
            
            st.download_button(
                label="üíæ –°–∫–∞—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                data=stats_text,
                file_name=f"analysis_stats_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                mime="text/plain"
            )
    
    with col3:
        if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", use_container_width=True):
            st.rerun()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
with st.sidebar:
    if st.button("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", use_container_width=True):
        st.switch_page("app.py")
    
    st.markdown("---")
    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    if filtered_jobs:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_cost = sum([float(j.get('used_credits', 0)) for j in filtered_jobs])
        avg_cost = total_cost / len(filtered_jobs) if filtered_jobs else 0
        
        st.metric("üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", format_currency(total_cost))
        st.metric("üìä –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", format_currency(avg_cost))
        
        # –°—Ç–∞—Ç—É—Å—ã
        status_counts = {}
        for job in filtered_jobs:
            status = job.get('status', 'UNKNOWN')
            status_counts[status] = status_counts.get(status, 0) + 1
        
        st.markdown("**üìà –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:**")
        for status, count in status_counts.items():
            emoji = get_status_emoji(status)
            st.write(f"{emoji} **{format_job_status_text(status)}:** {count}")
    
