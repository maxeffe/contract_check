import streamlit as st
import sys
import os
import pandas as pd

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.auth_service import check_authentication, show_user_info, init_session_state
from services.api_client import get_api_client
from utils.helpers import (
    format_datetime, format_currency, format_percentage,
    get_status_emoji, format_job_status_text, get_unique_statuses,
    filter_jobs_by_status, sort_jobs_by_date, SessionManager
)
from components.visualization import (
    display_job_metrics, create_status_pie_chart, create_risk_histogram,
    create_cost_timeline, format_status_badge
)
from utils.style_loader import load_theme
from datetime import datetime


load_theme()


init_session_state()
if not check_authentication():
    st.error("üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
    st.info("üëà –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É")
    st.stop()

st.title("–ò—Å—Ç–æ—Ä–∏—è")
st.markdown("–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∏ –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

api_client = get_api_client()


col1, col2 = st.columns([4, 1])
with col1:
    st.markdown("### üìä –í–∞—à–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏")
with col2:
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
        SessionManager.clear_cache()
        st.rerun()

with st.expander("üîß –§–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", expanded=False):
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        limit = st.selectbox(
            "üìä –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–µ–π:",
            [10, 20, 50, 100],
            index=1,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"
        )
    
    with col2:
        status_filter = st.multiselect(
            "üìà –°—Ç–∞—Ç—É—Å:",
            ["DONE", "ERROR", "PROCESSING", "QUEUED"],
            default=[],
            help="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –∞–Ω–∞–ª–∏–∑–∞"
        )
    
    with col3:
        show_details = st.checkbox(
            "üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏",
            value=True,
            help="–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
        )
    
    with col4:
        st.markdown("")


@st.cache_data(ttl=30)
def load_prediction_history(limit_param):
    try:
        return api_client.get_prediction_history(limit=limit_param)
    except Exception as e:
        error_msg = str(e)
        if "500" in error_msg:
            st.error("‚ùå –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            st.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        elif "404" in error_msg:
            st.warning("‚ö†Ô∏è Endpoint –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif "401" in error_msg or "403" in error_msg:
            st.error("üîí –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.")
        else:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {error_msg}")
        return {"jobs": [], "total_count": 0}

with st.spinner("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤..."):
    history_data = load_prediction_history(limit)

jobs = history_data.get("jobs", [])
total_count = history_data.get("total_count", 0)

if not jobs:
    st.info("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üìù –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑", use_container_width=True, type="primary"):
            st.switch_page("pages/New_Analysis.py")
    
    with col2:
        if st.button("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", use_container_width=True):
            st.switch_page("app.py")
    
    st.stop()

filtered_jobs = filter_jobs_by_status(jobs, status_filter) if status_filter else jobs
filtered_jobs = sort_jobs_by_date(filtered_jobs, ascending=False)

st.info(f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered_jobs)} –∏–∑ {total_count} –∞–Ω–∞–ª–∏–∑–æ–≤")

if filtered_jobs:
    display_job_metrics(filtered_jobs)
    


st.markdown("### üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤")


display_data = []
for job in filtered_jobs:
    display_data.append({
        'ID': job.get('id', 'N/A'),
        '–°—Ç–∞—Ç—É—Å': format_status_badge(job.get('status', 'UNKNOWN')),
        '–†–∏—Å–∫-–∏–Ω–¥–µ–∫—Å': f"{job['risk_score']*100:.1f}%" if job.get('risk_score') is not None else "N/A",
        '–°—Ç–æ–∏–º–æ—Å—Ç—å': format_currency(float(job.get('used_credits', 0))),
        '–ì–ª—É–±–∏–Ω–∞': job.get('summary_depth', 'N/A'),
        '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': format_datetime(job.get('started_at', '')),
        '–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è': format_datetime(job.get('finished_at', '')) if job.get('finished_at') else "N/A"
    })

if display_data:
    df = pd.DataFrame(display_data)
    
    st.dataframe(
        df,
        use_container_width=True,
        hide_index=True,
        column_config={
            "–°—Ç–∞—Ç—É—Å": st.column_config.TextColumn("–°—Ç–∞—Ç—É—Å", width="small"),
            "–†–∏—Å–∫-–∏–Ω–¥–µ–∫—Å": st.column_config.TextColumn("–†–∏—Å–∫-–∏–Ω–¥–µ–∫—Å", width="small"),
            "–°—Ç–æ–∏–º–æ—Å—Ç—å": st.column_config.TextColumn("–°—Ç–æ–∏–º–æ—Å—Ç—å", width="small"),
        }
    )


if show_details and filtered_jobs:
    st.markdown("### üîç –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    
    for job in filtered_jobs:
        job_id = job.get('id')
        status = job.get('status', 'UNKNOWN')
        

        border_colors = {
            'DONE': '#28a745',
            'COMPLETED': '#28a745', 
            'ERROR': '#dc3545',
            'PROCESSING': '#ffc107',
            'QUEUED': '#17a2b8'
        }
        border_color = border_colors.get(status, '#6c757d')
        
        with st.container():
            st.markdown(f"""
            <div style="border-left: 4px solid {border_color}; padding-left: 1rem; margin: 1rem 0;">
            """, unsafe_allow_html=True)
            
            with st.expander(
                f"{get_status_emoji(status)} –ê–Ω–∞–ª–∏–∑ #{job_id} - {format_job_status_text(status)}", 
                expanded=False
            ):
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.markdown("**üìä –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**")
                    st.write(f"**–°—Ç–∞—Ç—É—Å:** {format_job_status_text(status)}")
                    st.write(f"**–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞:** {job.get('summary_depth', 'N/A')}")
                
                with col2:
                    st.markdown("**üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
                    if job.get('used_credits'):
                        st.write(f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {format_currency(float(job['used_credits']))}")
                    if job.get('risk_score') is not None:
                        risk_percent = job['risk_score'] * 100
                        risk_level = "–í—ã—Å–æ–∫–∏–π" if risk_percent > 70 else "–°—Ä–µ–¥–Ω–∏–π" if risk_percent > 30 else "–ù–∏–∑–∫–∏–π"
                        if risk_percent > 70:
                            color = "#dc3545" 
                        elif risk_percent > 30:
                            color = "#ffc107" 
                        else:
                            color = "#28a745" 
                        
                        st.write(f"**–†–∏—Å–∫-–∏–Ω–¥–µ–∫—Å:** {risk_percent:.1f}% ({risk_level})")
                        st.progress(risk_percent / 100, text=f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level}")
        
                    if job.get('risk_clauses'):
                        risk_count = len(job['risk_clauses'])
                        high_risk_count = len([c for c in job['risk_clauses'] if c.get('risk_level') == 'HIGH'])
                        st.write(f"**–ù–∞–π–¥–µ–Ω–æ —Ä–∏—Å–∫–æ–≤:** {risk_count} (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {high_risk_count})")
                
                with col3:
                    st.markdown("**üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏:**")
                    if job.get('started_at'):
                        st.write(f"**–°–æ–∑–¥–∞–Ω:** {format_datetime(job['started_at'])}")
                    if job.get('finished_at'):
                        st.write(f"**–ó–∞–≤–µ—Ä—à–µ–Ω:** {format_datetime(job['finished_at'])}")
                    
                    if job.get('started_at') and job.get('finished_at'):
                        try:
                            start = datetime.fromisoformat(job['started_at'].replace('Z', '+00:00'))
                            end = datetime.fromisoformat(job['finished_at'].replace('Z', '+00:00'))
                            duration = end - start
                            st.write(f"**–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {duration.total_seconds():.1f} —Å–µ–∫")
                        except:
                            pass
                
                if job.get('summary_text'):
                    st.markdown("**üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:**")
                    st.text_area(
                        "–°–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:",
                        job['summary_text'],
                        height=200,
                        disabled=True,
                        key=f"summary_{job_id}"
                    )
                
    
                if job.get('risk_clauses') and len(job['risk_clauses']) > 0:
                    st.markdown("**‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã:**")
                    
                    for i, clause in enumerate(job['risk_clauses'], 1):
                        risk_level = clause.get('risk_level', 'UNKNOWN')
                        risk_colors = {
                            'HIGH': '#dc3545',
                            'MEDIUM': '#ffc107', 
                            'LOW': '#28a745'
                        }
                        risk_color = risk_colors.get(risk_level, '#6c757d')
                        
                        st.markdown(f"""
                        <div style="border-left: 3px solid {risk_color}; padding-left: 0.5rem; margin: 0.5rem 0;">
                        <strong>{i}. –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level}</strong><br>
                        {clause.get('clause_text', '–¢–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}
                        </div>
                        """, unsafe_allow_html=True)
                        
                        if clause.get('explanation'):
                            st.write(f"*üí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {clause['explanation']}*")
                        
                        if i < len(job['risk_clauses']):
                            st.markdown("---")
                
            
            st.markdown("</div>", unsafe_allow_html=True)

if total_count > len(jobs):
    st.markdown("---")
    st.info(f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ {len(jobs)} –∏–∑ {total_count} –∑–∞–ø–∏—Å–µ–π")
    
    if st.button("üìà –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö"):
        new_limit = min(limit * 2, total_count)
        st.session_state.history_limit = new_limit
        SessionManager.clear_cache()
        st.rerun()

if filtered_jobs:
    st.markdown("---")
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", use_container_width=True):
            st.rerun()
    
    with col2:
        st.empty()

with st.sidebar:
    st.markdown('<h1 class="sidebar-main-title">–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤</h1>', unsafe_allow_html=True)
    st.markdown("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    st.markdown("---")
    
    show_user_info()
    
    if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", use_container_width=True):
        st.switch_page("pages/New_Analysis.py")
    if st.button("–ò—Å—Ç–æ—Ä–∏—è", use_container_width=True, disabled=True):
        pass
    if st.button("–ë–∞–ª–∞–Ω—Å", use_container_width=True):
        st.switch_page("pages/Wallet.py")
    
