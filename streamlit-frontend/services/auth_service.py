import streamlit as st
from services.api_client import get_api_client
from typing import Dict, Any

def check_authentication() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    return hasattr(st.session_state, 'access_token') and st.session_state.access_token is not None

def require_auth():
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä/—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü, —Ç—Ä–µ–±—É—é—â–∏—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    if not check_authentication():
        st.error("üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
        st.info("üëà –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É")
        st.stop()

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'access_token' not in st.session_state:
        st.session_state.access_token = None
    if 'user_info' not in st.session_state:
        st.session_state.user_info = None

def login_form():
    """–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
    st.header("üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    
    with st.form("login_form", clear_on_submit=True):
        email = st.text_input("üìß Email", placeholder="–í–≤–µ–¥–∏—Ç–µ email")
        password = st.text_input("üîë –ü–∞—Ä–æ–ª—å", type="password", placeholder="–ü–∞—Ä–æ–ª—å")
        
        col1, col2 = st.columns([1, 2])
        with col1:
            submit = st.form_submit_button("üöÄ –í–æ–π—Ç–∏", use_container_width=True)
        
        if submit:
            if email and password:
                try:
                    with st.spinner("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥..."):
                        api_client = get_api_client()
                        response = api_client.login(email, password)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–µ—Å—Å–∏–∏
                        st.session_state.access_token = response["access_token"]
                        st.session_state.user_info = {
                            "username": response.get("user", {}).get("username", email),
                            "email": response.get("user", {}).get("email", email),
                            "user_id": response.get("user", {}).get("id"),
                            "role": response.get("user", {}).get("role", "USER"),
                            "token_type": response.get("token_type", "bearer")
                        }
                        
                        st.success("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!")
                        st.rerun()
                        
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}")
            else:
                st.error("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")

def register_form():
    """–§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    st.header("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    with st.form("register_form", clear_on_submit=True):
        username = st.text_input("üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        email = st.text_input("üìß Email", placeholder="Email")
        password = st.text_input("üîë –ü–∞—Ä–æ–ª—å", type="password", placeholder="–ü–∞—Ä–æ–ª—å")
        password_confirm = st.text_input("üîë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password", placeholder="–ü–æ–≤—Ç–æ—Ä –ø–∞—Ä–æ–ª—è")
        
        col1, col2 = st.columns([1, 2])
        with col1:
            submit = st.form_submit_button("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", use_container_width=True)
        
        if submit:
            if username and email and password and password_confirm:
                if password != password_confirm:
                    st.error("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                    return
                
                if len(password) < 6:
                    st.error("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
                    return
                
                try:
                    with st.spinner("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞..."):
                        api_client = get_api_client()
                        user_data = {
                            "username": username,
                            "email": email,
                            "password": password
                        }
                        response = api_client.register(user_data)
                        st.success("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
                        
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
            else:
                st.error("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")

def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if 'access_token' in st.session_state:
        del st.session_state.access_token
    if 'user_info' in st.session_state:
        del st.session_state.user_info
    
    # –û—á–∏—â–∞–µ–º –∫–µ—à
    st.cache_data.clear()
    
    st.success("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
    st.rerun()

def get_current_user_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if not check_authentication():
        return {}
    
    try:
        api_client = get_api_client()
        return api_client.get_current_user()
    except Exception:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–µ—Å—Å–∏–∏
        return st.session_state.get('user_info', {})

def show_user_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Å–∞–π–¥–±–∞—Ä–µ"""
    if check_authentication():
        user_info = st.session_state.get('user_info', {})
        username = user_info.get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        st.sidebar.markdown(f'<div style="color: white; font-size: 16px; font-weight: 500; margin-bottom: 1rem;">üë§ {username}</div>', unsafe_allow_html=True)
        
        if st.sidebar.button("üö™ –í—ã–π—Ç–∏", use_container_width=True):
            logout()
    else:
        pass  # –£–±—Ä–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ


def protected_page(page_func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
    def wrapper():
        init_session_state()
        require_auth()
        show_user_info()
        return page_func()
    return wrapper