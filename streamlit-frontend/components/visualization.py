import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from typing import List, Dict, Any

def create_status_pie_chart(jobs: List[Dict[str, Any]]) -> go.Figure:
    """–°–æ–∑–¥–∞—Ç—å –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤"""
    if not jobs:
        return None
    
    status_counts = {}
    for job in jobs:
        status = job.get('status', 'UNKNOWN')
        status_counts[status] = status_counts.get(status, 0) + 1
    
    colors = {
        'COMPLETED': '#1a1a1a',
        'ERROR': '#666666',
        'PROCESSING': '#4a4a4a',
        'QUEUED': '#333333'
    }
    
    fig = px.pie(
        values=list(status_counts.values()),
        names=list(status_counts.keys()),
        title="üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º",
        color_discrete_map=colors
    )
    
    fig.update_traces(textposition='inside', textinfo='percent+label')
    fig.update_layout(showlegend=True, height=400)
    
    return fig

def create_risk_histogram(jobs: List[Dict[str, Any]]) -> go.Figure:
    """–°–æ–∑–¥–∞—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∏—Å–∫-–∏–Ω–¥–µ–∫—Å–æ–≤"""
    risk_scores = []
    for job in jobs:
        if job.get('risk_score') is not None:
            risk_scores.append(job['risk_score'] * 100) 
    
    if not risk_scores:
        return None
    
    fig = px.histogram(
        x=risk_scores,
        nbins=10,
        title="üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫-–∏–Ω–¥–µ–∫—Å–æ–≤",
        labels={'x': '–†–∏—Å–∫-–∏–Ω–¥–µ–∫—Å (%)', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤'},
        color_discrete_sequence=['#1a1a1a']
    )
    
    fig.update_layout(
        xaxis_title="–†–∏—Å–∫-–∏–Ω–¥–µ–∫—Å (%)",
        yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        showlegend=False,
        height=400
    )
    
    return fig

def create_cost_timeline(jobs: List[Dict[str, Any]]) -> go.Figure:
    """–°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é –∑–∞—Ç—Ä–∞—Ç"""
    if not jobs:
        return None
    
    timeline_data = []
    for job in jobs:
        if job.get('started_at') and job.get('used_credits'):
            timeline_data.append({
                'date': job['started_at'][:10],
                'cost': float(job['used_credits']),
                'status': job.get('status', 'UNKNOWN')
            })
    
    if not timeline_data:
        return None
    
    df = pd.DataFrame(timeline_data)
    df['date'] = pd.to_datetime(df['date'])

    daily_costs = df.groupby('date')['cost'].sum().reset_index()
    
    fig = px.line(
        daily_costs,
        x='date',
        y='cost',
        title="üí∞ –ó–∞—Ç—Ä–∞—Ç—ã –ø–æ –¥–Ω—è–º",
        labels={'date': '–î–∞—Ç–∞', 'cost': '–ó–∞—Ç—Ä–∞—Ç—ã (‚ÇΩ)'},
        markers=True
    )
    
    fig.update_layout(
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–ó–∞—Ç—Ä–∞—Ç—ã (‚ÇΩ)",
        showlegend=False,
        height=400
    )
    
    return fig

def create_risk_gauge(average_risk: float) -> go.Figure:
    """–°–æ–∑–¥–∞—Ç—å –¥–∞—Ç—á–∏–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞"""
    fig = go.Figure(go.Indicator(
        mode = "gauge+number+delta",
        value = average_risk * 100, 
        domain = {'x': [0, 1], 'y': [0, 1]},
        title = {'text': "‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫-–∏–Ω–¥–µ–∫—Å (%)"},
        delta = {'reference': 50},
        gauge = {
            'axis': {'range': [None, 100]},
            'bar': {'color': "darkblue"},
            'steps': [
                {'range': [0, 30], 'color': "lightgreen"},
                {'range': [30, 70], 'color': "yellow"},
                {'range': [70, 100], 'color': "red"}
            ],
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75,
                'value': 80
            }
        }
    ))
    
    fig.update_layout(height=300)
    return fig

def display_job_metrics(jobs: List[Dict[str, Any]]):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º"""
    if not jobs:
        st.info("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    

    total_jobs = len(jobs)
    completed_jobs = len([j for j in jobs if j.get('status') in ['COMPLETED', 'DONE']])
    total_cost = sum([float(j.get('used_credits', 0)) for j in jobs])
    

    risk_scores = [j.get('risk_score') for j in jobs if j.get('risk_score') is not None]
    avg_risk = sum(risk_scores) / len(risk_scores) if risk_scores else 0
    

    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="üìä –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤",
            value=total_jobs
        )
    
    with col2:
        st.metric(
            label="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            value=completed_jobs,
            delta=f"{(completed_jobs/total_jobs*100):.1f}%" if total_jobs > 0 else "0%"
        )
    
    with col3:
        st.metric(
            label="üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ",
            value=f"{total_cost:.2f}‚ÇΩ"
        )
    
    with col4:
        st.metric(
            label="‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫",
            value=f"{avg_risk*100:.1f}%" if avg_risk > 0 else "N/A",
            delta=f"{'–í—ã—Å–æ–∫–∏–π' if avg_risk > 0.7 else '–°—Ä–µ–¥–Ω–∏–π' if avg_risk > 0.3 else '–ù–∏–∑–∫–∏–π'}" if avg_risk > 0 else None
        )

def display_wallet_chart(transactions: List[Dict[str, Any]]):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–æ—à–µ–ª—å–∫–∞"""
    if not transactions:
        st.info("üì≠ –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    df = pd.DataFrame(transactions)
    df['date'] = pd.to_datetime(df['trans_time']).dt.date
    df['amount'] = pd.to_numeric(df['amount'], errors='coerce').fillna(0)
    df['amount_signed'] = df.apply(
        lambda row: row['amount'] if row['tx_type'] == 'CREDIT' else -row['amount'], 
        axis=1
    )
    
    daily_transactions = df.groupby(['date', 'tx_type'])['amount'].sum().reset_index()
    
    fig = px.bar(
        daily_transactions,
        x='date',
        y='amount',
        color='tx_type',
        title="üí≥ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
        color_discrete_map={
            'CREDIT': '#1a1a1a',
            'DEBIT': '#666666'
        },
        labels={'amount': '–°—É–º–º–∞ (‚ÇΩ)', 'date': '–î–∞—Ç–∞', 'tx_type': '–¢–∏–ø'}
    )
    
    fig.update_layout(
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–°—É–º–º–∞ (‚ÇΩ)",
        legend_title="–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
        height=400
    )
    
    st.plotly_chart(fig, use_container_width=True)

def format_status_badge(status: str) -> str:
    """Format status with monochrome badge"""
    symbols = {
        'DONE': '‚óè',
        'COMPLETED': '‚óè', 
        'ERROR': '‚óã',
        'PROCESSING': '‚óê',
        'QUEUED': '‚óØ'
    }
    
    symbol = symbols.get(status, '‚Ä¢')
    return f"{symbol} {status}"

def show_job_summary_card(job: Dict[str, Any]):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Å —Å–≤–æ–¥–∫–æ–π –∑–∞–¥–∞–Ω–∏—è"""
    with st.container():
        st.markdown("---")
        
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            st.write(f"**üìÑ –ê–Ω–∞–ª–∏–∑ #{job['id']}**")
            st.write(f"–°—Ç–∞—Ç—É—Å: {format_status_badge(job.get('status', 'UNKNOWN'))}")
        
        with col2:
            if job.get('risk_score') is not None:
                risk_percent = job['risk_score'] * 100
                st.metric("‚ö†Ô∏è –†–∏—Å–∫", f"{risk_percent:.1f}%")
            else:
                st.write("‚ö†Ô∏è –†–∏—Å–∫: N/A")
        
        with col3:
            cost = job.get('used_credits', 0)
            st.metric("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å", f"{cost}‚ÇΩ")
        
        if job.get('summary_text'):
            with st.expander(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ #{job['id']}", expanded=False):
                st.text_area(
                    "–°–≤–æ–¥–∫–∞:",
                    job['summary_text'],
                    height=150,
                    disabled=True,
                    key=f"summary_{job['id']}"
                )